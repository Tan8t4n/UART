module uart_rx(
    input wire clk,             // 50 MHz clock
    input wire rst,             // Reset signal
    input wire rx,              // UART receive line
    output reg [7:0] data_out,  // 8-bit data output (ASCII character)
    output reg data_valid       // Signal to indicate data reception complete
);

    localparam BAUD_RATE = 9600;
    localparam CLOCK_FREQ = 50000000;  // 50 MHz
    localparam BAUD_COUNT = CLOCK_FREQ / (16 * BAUD_RATE);

    localparam IDLE = 2'b00;
    localparam START_BIT = 2'b01;
    localparam DATA_BITS = 2'b10;
    localparam STOP_BIT = 2'b11;

    reg [1:0] state = IDLE;
    reg [15:0] baud_counter = 0;
    reg [3:0] bit_index = 0;
    reg [7:0] data = 0;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            baud_counter <= 0;
            bit_index <= 0;
            data <= 0;
            data_out <= 0;
            data_valid <= 0;
        end else begin
            case (state)
                IDLE: begin
                    data_valid <= 0;
                    if (!rx) begin  // Start bit detected
                        state <= START_BIT;
                        baud_counter <= 0;
                    end
                end

                START_BIT: begin
                    if (baud_counter == BAUD_COUNT / 2) begin
                        state <= DATA_BITS;
                        baud_counter <= 0;
                        bit_index <= 0;
                    end else begin
                        baud_counter <= baud_counter + 1;
                    end
                end

                DATA_BITS: begin
                    if (baud_counter == BAUD_COUNT) begin
                        baud_counter <= 0;
                        data[bit_index] <= rx;  // Read the data bit
                        bit_index <= bit_index + 1;

                        if (bit_index == 7) begin
                            state <= STOP_BIT;
                        end
                    end else begin
                        baud_counter <= baud_counter + 1;
                    end
                end

                STOP_BIT: begin
                    if (baud_counter == BAUD_COUNT) begin
                        state <= IDLE;
                        data_out <= data;  // Output the received data
                        data_valid <= 1;
                    end else begin
                        baud_counter <= baud_counter + 1;
                    end
                end
            endcase
        end
    end
endmodule
